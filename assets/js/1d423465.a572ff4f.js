"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7494],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return p}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=r.createContext({}),l=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(d.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,d=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),m=l(n),p=o,f=m["".concat(d,".").concat(p)]||m[p]||s[p]||i;return n?r.createElement(f,a(a({ref:t},u),{},{components:n})):r.createElement(f,a({ref:t},u))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var c={};for(var d in t)hasOwnProperty.call(t,d)&&(c[d]=t[d]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var l=2;l<i;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7990:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return d},metadata:function(){return l},toc:function(){return u},default:function(){return m}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],c={},d="\ud83c\udfd7 Builder",l={unversionedId:"Implementation/decoder/Builder",id:"Implementation/decoder/Builder",isDocsHomePage:!1,title:"\ud83c\udfd7 Builder",description:"On utiliser un Builder pour composer notre structure DocumentDecoded, il est en charge des fonctions suivantes:",source:"@site/docs/Implementation/decoder/Builder.md",sourceDirName:"Implementation/decoder",slug:"/Implementation/decoder/Builder",permalink:"/lib2ddoc/docs/Implementation/decoder/Builder",editUrl:"https://gitlab.insa-rouen.fr/acamusat/lib2ddoc/-/edit/SiteWeb/website/docs/Implementation/decoder/Builder.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"\ud83e\uddf0 FieldZoneDecoder",permalink:"/lib2ddoc/docs/Implementation/decoder/Message"},next:{title:"\u2714 Validator",permalink:"/lib2ddoc/docs/Implementation/decoder/Validator"}},u=[],s={toc:u};function m(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"-builder"},"\ud83c\udfd7 Builder"),(0,i.kt)("p",null,"On utiliser un Builder pour composer notre structure ",(0,i.kt)("strong",{parentName:"p"},"DocumentDecoded"),", il est en charge des fonctions suivantes: "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Headers"),(0,i.kt)("li",{parentName:"ul"},"FieldZone"),(0,i.kt)("li",{parentName:"ul"},"Validation de document (",(0,i.kt)("strong",{parentName:"li"},"Validator"),")"),(0,i.kt)("li",{parentName:"ul"},"Validation de signature (",(0,i.kt)("strong",{parentName:"li"},"Signer"),")")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'\nlet (headers, headers_size) = Headers::new(str);\n\nlet document_raw = DocumentRaw::new(str, headers_size)?;\n\nlet mut document_decoded = DocumentDecodedBuilder::new()\n                            .add_headers(headers)\n                            .decode_message(&document_raw.message)?\n                            .collect().to_error(ErrorKind::Decoder, String::from("Error decoding"))?;\n\nlet signing = Signing::verify_signature(&document_raw, &document_decoded)?;\n\nlet validity = Validity::validate(&mut document_decoded);\n\nOk(Document { \n    raw: document_raw,\n    decoded: document_decoded,\n    signing,\n    validity\n})\n\n')))}m.isMDXComponent=!0}}]);