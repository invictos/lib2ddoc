"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5753],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,b=d["".concat(s,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(b,o(o({ref:t},u),{},{components:n})):r.createElement(b,o({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},684:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),o=["components"],l={},s="\u26a1 GitLab CI/CD",c={unversionedId:"project/CI_CD",id:"project/CI_CD",isDocsHomePage:!1,title:"\u26a1 GitLab CI/CD",description:"\ud83d\udcdd Explication",source:"@site/docs/project/CI_CD.md",sourceDirName:"project",slug:"/project/CI_CD",permalink:"/lib2ddoc/docs/project/CI_CD",editUrl:"https://gitlab.insa-rouen.fr/acamusat/lib2ddoc/-/edit/SiteWeb/website/docs/project/CI_CD.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"\ud83c\udf0d Site Web",permalink:"/lib2ddoc/docs/project/website"},next:{title:"\ud83d\udd25 D\xe9monstration",permalink:"/lib2ddoc/docs/project/Demo"}},u=[{value:"\ud83d\udcdd Explication",id:"-explication",children:[],level:2},{value:"\u2692 Pratique",id:"-pratique",children:[],level:2}],p={toc:u};function d(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"-gitlab-cicd"},"\u26a1 GitLab CI/CD"),(0,a.kt)("h2",{id:"-explication"},"\ud83d\udcdd Explication"),(0,a.kt)("p",null,"GitLab CI/CD est une fonctionnalit\xe9 qui permet de mettre en place des pipelines de CI/CD pour n'importe quel projet, qu'il soit nouveau ou existant, pourvu qu'il utilise Git.\nIl nous permet d'automatiser les \xe9tapes :"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"d'int\xe9gration continue : Build > Tests (unitaires, d'int\xe9gration, de non-r\xe9gression...)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"de d\xe9ploiement continu : Review > D\xe9ploiement (staging, production...)"))),(0,a.kt)("p",null,"Cette automatisation acc\xe9l\xe8re la production de code : un seul commit suffit \xe0 d\xe9clencher une pipeline c\xf4t\xe9 GitLab qui s'occupera de g\xe9n\xe9rer un build de production, lancer la suite de tests et d\xe9ployer la nouvelle version en staging/production ! Cela permet \xe9galement d'augmenter la confiance des d\xe9veloppeurs et la qualit\xe9 du code envoy\xe9 en production, car on a l'assurance que chaque modification est pass\xe9e par ce processus."),(0,a.kt)("h2",{id:"-pratique"},"\u2692 Pratique"),(0,a.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Gitlab ne garde qu'un seul site par projet. On utilise AWS pour sauvegarder tous les sites de toutes les branches"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'stages:\n  - build\n  - test\n  - deploy\n\nbuild_rust:\n  stage: build\n  image: rust:latest\n  before_script:\n    - apt update && apt -y install libdmtx-dev\n  script:\n    - echo "Building library..."\n    - cargo build\n\ntest_rust:\n  stage: test\n  image: rust:latest\n  needs:\n    - build_rust\n  before_script:\n    - apt update && apt -y install libdmtx-dev\n  script:\n    - echo "Testing library..."\n    - cargo test\n\n#Build once for gitlab pages (to ../public). And a second time for live URL.\npages:\n  stage: build\n  image: node:15.12-alpine3.13\n  script:\n  - cd website\n  - yarn install\n  - yarn build\n  - mv ./build ../public\n  - >-\n    sed -i -e "s/baseUrl: \'\\/lib2ddoc\\/\',/baseUrl: \'\\/$CI_COMMIT_SHORT_SHA\\/\',/g" docusaurus.config.js\n  - >-\n    sed -i -e "s/url: \'https:\\/\\/pages.gitlab.io\',/url: \'https:\\/\\/lib2ddoc.aws.ipv4.ovh\',/g" docusaurus.config.js\n  - yarn build\n  - mv ./build ../public2\n  artifacts:\n    paths:\n    - public\n    - public2\n\ndeploy_website:\n  stage: deploy\n  needs: \n    - pages\n  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest\n  script:\n    - >-\n      aws s3 sync public2/ "s3://ovh.ipv4.aws.lib2ddoc/$CI_COMMIT_SHORT_SHA/"\n\n')))}d.isMDXComponent=!0}}]);