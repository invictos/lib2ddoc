"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1107],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return m}});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),p=s(r),m=i,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||a;return r?n.createElement(f,o(o({ref:t},c),{},{components:r})):n.createElement(f,o({ref:t},c))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=p;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u.mdxType="string"==typeof e?e:i,o[1]=u;for(var s=2;s<a;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},1913:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return u},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return c},default:function(){return p}});var n=r(7462),i=r(3366),a=(r(7294),r(3905)),o=["components"],u={},l="\ud83e\uddf0 Utilisation de libDMTX en rust",s={unversionedId:"Modules_externes/libDMTX_rust",id:"Modules_externes/libDMTX_rust",isDocsHomePage:!1,title:"\ud83e\uddf0 Utilisation de libDMTX en rust",description:"\ud83d\udd28 Librairie",source:"@site/docs/Modules_externes/libDMTX_rust.md",sourceDirName:"Modules_externes",slug:"/Modules_externes/libDMTX_rust",permalink:"/lib2ddoc/docs/Modules_externes/libDMTX_rust",editUrl:"https://gitlab.insa-rouen.fr/acamusat/lib2ddoc/-/edit/SiteWeb/website/docs/Modules_externes/libDMTX_rust.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"\ud83d\udcbb Bindgen",permalink:"/lib2ddoc/docs/Modules_externes/bindgen"},next:{title:"\ud83d\udcce Serialiser",permalink:"/lib2ddoc/docs/Modules_externes/serialiser"}},c=[{value:"\ud83d\udd28 Librairie",id:"-librairie",children:[],level:2},{value:"\ud83c\udf2e Wrapper",id:"-wrapper",children:[],level:2},{value:"\ud83d\udd27 Utilisation",id:"-utilisation",children:[],level:2}],d={toc:c};function p(e){var t=e.components,r=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"-utilisation-de-libdmtx-en-rust"},"\ud83e\uddf0 Utilisation de libDMTX en rust"),(0,a.kt)("h2",{id:"-librairie"},"\ud83d\udd28 Librairie"),(0,a.kt)("p",null,"Pour pouvoir utiliser la librairie: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'mod dmtx;\n\n//Pour que le compileur ajoute -ldmtx\n#[link(name = "dmtx")] \nextern {}\n')),(0,a.kt)("p",null,"On obtient des signatures rust de cette forme:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"pub unsafe fn dmtxImageCreate(pxl: *mut std::os::raw::c_uchar, width: std::os::raw::c_int, height: std::os::raw::c_int, pack: std::os::raw::c_int) -> *mut DmtxImage\n")),(0,a.kt)("h2",{id:"-wrapper"},"\ud83c\udf2e Wrapper"),(0,a.kt)("p",null,"Attention, les signatures et les types sont au format c (avec pointeurs...)"),(0,a.kt)("p",null,'On devrait donc faire une "safe interface", suivant les bonnes pratiques rust.'),(0,a.kt)("p",null,'Par simplicit\xe9, on a choisit d\'utiliser libDMTX de fa\xe7on brut, en gardant tout le code "unsafe" dans une seule fonction. (',(0,a.kt)("strong",{parentName:"p"},"/src/libdmtx/mod.rs"),")"),(0,a.kt)("h2",{id:"-utilisation"},"\ud83d\udd27 Utilisation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn dmtx_read(pxl: &[u8], width: u32, height: u32, pack: DmtxPackOrder) -> Vec<u8>\n")),(0,a.kt)("p",null,"Notre interface rust pour libdmtx prends donc en entr\xe9e un vecteur plat de pixels, la largeur et hauteur de l'image, ainsi que son packOrder. "),(0,a.kt)("p",null,"On retourne un vecteur rust contenant les donn\xe9es du Datamatrix , ou un vecteur vide en cas d'abscence de matrice (on donne 1s a libdmtx pour trouver la matrice)"))}p.isMDXComponent=!0}}]);