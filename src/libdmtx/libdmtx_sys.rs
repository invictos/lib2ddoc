#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(deref_nullptr)]
#![allow(dead_code)]

/* automatically generated by rust-bindgen 0.59.1 */

pub const DmtxVersion: &'static [u8; 6usize] = b"0.7.5\0";
pub const DmtxUndefined: i32 = -1;
pub const DmtxPass: u32 = 1;
pub const DmtxFail: u32 = 0;
pub const DmtxTrue: u32 = 1;
pub const DmtxFalse: u32 = 0;
pub const DmtxFormatMatrix: u32 = 0;
pub const DmtxFormatMosaic: u32 = 1;
pub const DmtxSymbolSquareCount: u32 = 24;
pub const DmtxSymbolRectCount: u32 = 6;
pub const DmtxModuleOff: u32 = 0;
pub const DmtxModuleOnRed: u32 = 1;
pub const DmtxModuleOnGreen: u32 = 2;
pub const DmtxModuleOnBlue: u32 = 4;
pub const DmtxModuleOnRGB: u32 = 7;
pub const DmtxModuleOn: u32 = 7;
pub const DmtxModuleUnsure: u32 = 8;
pub const DmtxModuleAssigned: u32 = 16;
pub const DmtxModuleVisited: u32 = 32;
pub const DmtxModuleData: u32 = 64;
pub type size_t = ::std::os::raw::c_ulong;
pub type __time_t = ::std::os::raw::c_long;
pub type time_t = __time_t;
pub const DmtxStatus_DmtxStatusEncoding: DmtxStatus = 0;
pub const DmtxStatus_DmtxStatusComplete: DmtxStatus = 1;
pub const DmtxStatus_DmtxStatusInvalid: DmtxStatus = 2;
pub const DmtxStatus_DmtxStatusFatal: DmtxStatus = 3;
pub type DmtxStatus = ::std::os::raw::c_uint;
pub const DmtxScheme_DmtxSchemeAutoFast: DmtxScheme = -2;
pub const DmtxScheme_DmtxSchemeAutoBest: DmtxScheme = -1;
pub const DmtxScheme_DmtxSchemeAscii: DmtxScheme = 0;
pub const DmtxScheme_DmtxSchemeC40: DmtxScheme = 1;
pub const DmtxScheme_DmtxSchemeText: DmtxScheme = 2;
pub const DmtxScheme_DmtxSchemeX12: DmtxScheme = 3;
pub const DmtxScheme_DmtxSchemeEdifact: DmtxScheme = 4;
pub const DmtxScheme_DmtxSchemeBase256: DmtxScheme = 5;
pub type DmtxScheme = ::std::os::raw::c_int;
pub const DmtxSymbolSize_DmtxSymbolRectAuto: DmtxSymbolSize = -3;
pub const DmtxSymbolSize_DmtxSymbolSquareAuto: DmtxSymbolSize = -2;
pub const DmtxSymbolSize_DmtxSymbolShapeAuto: DmtxSymbolSize = -1;
pub const DmtxSymbolSize_DmtxSymbol10x10: DmtxSymbolSize = 0;
pub const DmtxSymbolSize_DmtxSymbol12x12: DmtxSymbolSize = 1;
pub const DmtxSymbolSize_DmtxSymbol14x14: DmtxSymbolSize = 2;
pub const DmtxSymbolSize_DmtxSymbol16x16: DmtxSymbolSize = 3;
pub const DmtxSymbolSize_DmtxSymbol18x18: DmtxSymbolSize = 4;
pub const DmtxSymbolSize_DmtxSymbol20x20: DmtxSymbolSize = 5;
pub const DmtxSymbolSize_DmtxSymbol22x22: DmtxSymbolSize = 6;
pub const DmtxSymbolSize_DmtxSymbol24x24: DmtxSymbolSize = 7;
pub const DmtxSymbolSize_DmtxSymbol26x26: DmtxSymbolSize = 8;
pub const DmtxSymbolSize_DmtxSymbol32x32: DmtxSymbolSize = 9;
pub const DmtxSymbolSize_DmtxSymbol36x36: DmtxSymbolSize = 10;
pub const DmtxSymbolSize_DmtxSymbol40x40: DmtxSymbolSize = 11;
pub const DmtxSymbolSize_DmtxSymbol44x44: DmtxSymbolSize = 12;
pub const DmtxSymbolSize_DmtxSymbol48x48: DmtxSymbolSize = 13;
pub const DmtxSymbolSize_DmtxSymbol52x52: DmtxSymbolSize = 14;
pub const DmtxSymbolSize_DmtxSymbol64x64: DmtxSymbolSize = 15;
pub const DmtxSymbolSize_DmtxSymbol72x72: DmtxSymbolSize = 16;
pub const DmtxSymbolSize_DmtxSymbol80x80: DmtxSymbolSize = 17;
pub const DmtxSymbolSize_DmtxSymbol88x88: DmtxSymbolSize = 18;
pub const DmtxSymbolSize_DmtxSymbol96x96: DmtxSymbolSize = 19;
pub const DmtxSymbolSize_DmtxSymbol104x104: DmtxSymbolSize = 20;
pub const DmtxSymbolSize_DmtxSymbol120x120: DmtxSymbolSize = 21;
pub const DmtxSymbolSize_DmtxSymbol132x132: DmtxSymbolSize = 22;
pub const DmtxSymbolSize_DmtxSymbol144x144: DmtxSymbolSize = 23;
pub const DmtxSymbolSize_DmtxSymbol8x18: DmtxSymbolSize = 24;
pub const DmtxSymbolSize_DmtxSymbol8x32: DmtxSymbolSize = 25;
pub const DmtxSymbolSize_DmtxSymbol12x26: DmtxSymbolSize = 26;
pub const DmtxSymbolSize_DmtxSymbol12x36: DmtxSymbolSize = 27;
pub const DmtxSymbolSize_DmtxSymbol16x36: DmtxSymbolSize = 28;
pub const DmtxSymbolSize_DmtxSymbol16x48: DmtxSymbolSize = 29;
pub type DmtxSymbolSize = ::std::os::raw::c_int;
pub const DmtxDirection_DmtxDirNone: DmtxDirection = 0;
pub const DmtxDirection_DmtxDirUp: DmtxDirection = 1;
pub const DmtxDirection_DmtxDirLeft: DmtxDirection = 2;
pub const DmtxDirection_DmtxDirDown: DmtxDirection = 4;
pub const DmtxDirection_DmtxDirRight: DmtxDirection = 8;
pub const DmtxDirection_DmtxDirHorizontal: DmtxDirection = 10;
pub const DmtxDirection_DmtxDirVertical: DmtxDirection = 5;
pub const DmtxDirection_DmtxDirRightUp: DmtxDirection = 9;
pub const DmtxDirection_DmtxDirLeftDown: DmtxDirection = 6;
pub type DmtxDirection = ::std::os::raw::c_uint;
pub const DmtxSymAttribute_DmtxSymAttribSymbolRows: DmtxSymAttribute = 0;
pub const DmtxSymAttribute_DmtxSymAttribSymbolCols: DmtxSymAttribute = 1;
pub const DmtxSymAttribute_DmtxSymAttribDataRegionRows: DmtxSymAttribute = 2;
pub const DmtxSymAttribute_DmtxSymAttribDataRegionCols: DmtxSymAttribute = 3;
pub const DmtxSymAttribute_DmtxSymAttribHorizDataRegions: DmtxSymAttribute = 4;
pub const DmtxSymAttribute_DmtxSymAttribVertDataRegions: DmtxSymAttribute = 5;
pub const DmtxSymAttribute_DmtxSymAttribMappingMatrixRows: DmtxSymAttribute = 6;
pub const DmtxSymAttribute_DmtxSymAttribMappingMatrixCols: DmtxSymAttribute = 7;
pub const DmtxSymAttribute_DmtxSymAttribInterleavedBlocks: DmtxSymAttribute = 8;
pub const DmtxSymAttribute_DmtxSymAttribBlockErrorWords: DmtxSymAttribute = 9;
pub const DmtxSymAttribute_DmtxSymAttribBlockMaxCorrectable: DmtxSymAttribute = 10;
pub const DmtxSymAttribute_DmtxSymAttribSymbolDataWords: DmtxSymAttribute = 11;
pub const DmtxSymAttribute_DmtxSymAttribSymbolErrorWords: DmtxSymAttribute = 12;
pub const DmtxSymAttribute_DmtxSymAttribSymbolMaxCorrectable: DmtxSymAttribute = 13;
pub type DmtxSymAttribute = ::std::os::raw::c_uint;
pub const DmtxCornerLoc_DmtxCorner00: DmtxCornerLoc = 1;
pub const DmtxCornerLoc_DmtxCorner10: DmtxCornerLoc = 2;
pub const DmtxCornerLoc_DmtxCorner11: DmtxCornerLoc = 4;
pub const DmtxCornerLoc_DmtxCorner01: DmtxCornerLoc = 8;
pub type DmtxCornerLoc = ::std::os::raw::c_uint;
pub const DmtxProperty_DmtxPropScheme: DmtxProperty = 100;
pub const DmtxProperty_DmtxPropSizeRequest: DmtxProperty = 101;
pub const DmtxProperty_DmtxPropMarginSize: DmtxProperty = 102;
pub const DmtxProperty_DmtxPropModuleSize: DmtxProperty = 103;
pub const DmtxProperty_DmtxPropFnc1: DmtxProperty = 104;
pub const DmtxProperty_DmtxPropEdgeMin: DmtxProperty = 200;
pub const DmtxProperty_DmtxPropEdgeMax: DmtxProperty = 201;
pub const DmtxProperty_DmtxPropScanGap: DmtxProperty = 202;
pub const DmtxProperty_DmtxPropSquareDevn: DmtxProperty = 203;
pub const DmtxProperty_DmtxPropSymbolSize: DmtxProperty = 204;
pub const DmtxProperty_DmtxPropEdgeThresh: DmtxProperty = 205;
pub const DmtxProperty_DmtxPropWidth: DmtxProperty = 300;
pub const DmtxProperty_DmtxPropHeight: DmtxProperty = 301;
pub const DmtxProperty_DmtxPropPixelPacking: DmtxProperty = 302;
pub const DmtxProperty_DmtxPropBitsPerPixel: DmtxProperty = 303;
pub const DmtxProperty_DmtxPropBytesPerPixel: DmtxProperty = 304;
pub const DmtxProperty_DmtxPropRowPadBytes: DmtxProperty = 305;
pub const DmtxProperty_DmtxPropRowSizeBytes: DmtxProperty = 306;
pub const DmtxProperty_DmtxPropImageFlip: DmtxProperty = 307;
pub const DmtxProperty_DmtxPropChannelCount: DmtxProperty = 308;
pub const DmtxProperty_DmtxPropXmin: DmtxProperty = 400;
pub const DmtxProperty_DmtxPropXmax: DmtxProperty = 401;
pub const DmtxProperty_DmtxPropYmin: DmtxProperty = 402;
pub const DmtxProperty_DmtxPropYmax: DmtxProperty = 403;
pub const DmtxProperty_DmtxPropScale: DmtxProperty = 404;
pub type DmtxProperty = ::std::os::raw::c_uint;
pub const DmtxPackOrder_DmtxPackCustom: DmtxPackOrder = 100;
pub const DmtxPackOrder_DmtxPack1bppK: DmtxPackOrder = 200;
pub const DmtxPackOrder_DmtxPack8bppK: DmtxPackOrder = 300;
pub const DmtxPackOrder_DmtxPack16bppRGB: DmtxPackOrder = 400;
pub const DmtxPackOrder_DmtxPack16bppRGBX: DmtxPackOrder = 401;
pub const DmtxPackOrder_DmtxPack16bppXRGB: DmtxPackOrder = 402;
pub const DmtxPackOrder_DmtxPack16bppBGR: DmtxPackOrder = 403;
pub const DmtxPackOrder_DmtxPack16bppBGRX: DmtxPackOrder = 404;
pub const DmtxPackOrder_DmtxPack16bppXBGR: DmtxPackOrder = 405;
pub const DmtxPackOrder_DmtxPack16bppYCbCr: DmtxPackOrder = 406;
pub const DmtxPackOrder_DmtxPack24bppRGB: DmtxPackOrder = 500;
pub const DmtxPackOrder_DmtxPack24bppBGR: DmtxPackOrder = 501;
pub const DmtxPackOrder_DmtxPack24bppYCbCr: DmtxPackOrder = 502;
pub const DmtxPackOrder_DmtxPack32bppRGBX: DmtxPackOrder = 600;
pub const DmtxPackOrder_DmtxPack32bppXRGB: DmtxPackOrder = 601;
pub const DmtxPackOrder_DmtxPack32bppBGRX: DmtxPackOrder = 602;
pub const DmtxPackOrder_DmtxPack32bppXBGR: DmtxPackOrder = 603;
pub const DmtxPackOrder_DmtxPack32bppCMYK: DmtxPackOrder = 604;
pub type DmtxPackOrder = ::std::os::raw::c_uint;
pub const DmtxFlip_DmtxFlipNone: DmtxFlip = 0;
pub const DmtxFlip_DmtxFlipX: DmtxFlip = 1;
pub const DmtxFlip_DmtxFlipY: DmtxFlip = 2;
pub type DmtxFlip = ::std::os::raw::c_uint;
pub type DmtxMatrix3 = [[f64; 3usize]; 3usize];
#[doc = " @struct DmtxPixelLoc"]
#[doc = " @brief DmtxPixelLoc"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DmtxPixelLoc_struct {
    pub X: ::std::os::raw::c_int,
    pub Y: ::std::os::raw::c_int,
}
#[doc = " @struct DmtxPixelLoc"]
#[doc = " @brief DmtxPixelLoc"]
pub type DmtxPixelLoc = DmtxPixelLoc_struct;
#[doc = " @struct DmtxVector2"]
#[doc = " @brief DmtxVector2"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DmtxVector2_struct {
    pub X: f64,
    pub Y: f64,
}
#[doc = " @struct DmtxVector2"]
#[doc = " @brief DmtxVector2"]
pub type DmtxVector2 = DmtxVector2_struct;
#[doc = " @struct DmtxRay2"]
#[doc = " @brief DmtxRay2"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DmtxRay2_struct {
    pub tMin: f64,
    pub tMax: f64,
    pub p: DmtxVector2,
    pub v: DmtxVector2,
}
#[doc = " @struct DmtxRay2"]
#[doc = " @brief DmtxRay2"]
pub type DmtxRay2 = DmtxRay2_struct;
pub type DmtxByte = ::std::os::raw::c_uchar;
#[doc = " @struct DmtxByteList"]
#[doc = " @brief DmtxByteList"]
#[doc = " Use signed int for length fields instead of size_t to play nicely with RS"]
#[doc = " arithmetic"]
pub type DmtxByteList = DmtxByteList_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DmtxByteList_struct {
    pub length: ::std::os::raw::c_int,
    pub capacity: ::std::os::raw::c_int,
    pub b: *mut DmtxByte,
}
pub type DmtxEncodeStream = DmtxEncodeStream_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DmtxEncodeStream_struct {
    pub currentScheme: ::std::os::raw::c_int,
    pub inputNext: ::std::os::raw::c_int,
    pub outputChainValueCount: ::std::os::raw::c_int,
    pub outputChainWordCount: ::std::os::raw::c_int,
    pub reason: *mut ::std::os::raw::c_char,
    pub sizeIdx: ::std::os::raw::c_int,
    pub fnc1: ::std::os::raw::c_int,
    pub status: DmtxStatus,
    pub input: *mut DmtxByteList,
    pub output: *mut DmtxByteList,
}
#[doc = " @struct DmtxImage"]
#[doc = " @brief DmtxImage"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DmtxImage_struct {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub pixelPacking: ::std::os::raw::c_int,
    pub bitsPerPixel: ::std::os::raw::c_int,
    pub bytesPerPixel: ::std::os::raw::c_int,
    pub rowPadBytes: ::std::os::raw::c_int,
    pub rowSizeBytes: ::std::os::raw::c_int,
    pub imageFlip: ::std::os::raw::c_int,
    pub channelCount: ::std::os::raw::c_int,
    pub channelStart: [::std::os::raw::c_int; 4usize],
    pub bitsPerChannel: [::std::os::raw::c_int; 4usize],
    pub pxl: *mut ::std::os::raw::c_uchar,
}
#[doc = " @struct DmtxImage"]
#[doc = " @brief DmtxImage"]
pub type DmtxImage = DmtxImage_struct;
#[doc = " @struct DmtxPointFlow"]
#[doc = " @brief DmtxPointFlow"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DmtxPointFlow_struct {
    pub plane: ::std::os::raw::c_int,
    pub arrive: ::std::os::raw::c_int,
    pub depart: ::std::os::raw::c_int,
    pub mag: ::std::os::raw::c_int,
    pub loc: DmtxPixelLoc,
}
#[doc = " @struct DmtxPointFlow"]
#[doc = " @brief DmtxPointFlow"]
pub type DmtxPointFlow = DmtxPointFlow_struct;
#[doc = " @struct DmtxBestLine"]
#[doc = " @brief DmtxBestLine"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DmtxBestLine_struct {
    pub angle: ::std::os::raw::c_int,
    pub hOffset: ::std::os::raw::c_int,
    pub mag: ::std::os::raw::c_int,
    pub stepBeg: ::std::os::raw::c_int,
    pub stepPos: ::std::os::raw::c_int,
    pub stepNeg: ::std::os::raw::c_int,
    pub distSq: ::std::os::raw::c_int,
    pub devn: f64,
    pub locBeg: DmtxPixelLoc,
    pub locPos: DmtxPixelLoc,
    pub locNeg: DmtxPixelLoc,
}
#[doc = " @struct DmtxBestLine"]
#[doc = " @brief DmtxBestLine"]
pub type DmtxBestLine = DmtxBestLine_struct;
#[doc = " @struct DmtxRegion"]
#[doc = " @brief DmtxRegion"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DmtxRegion_struct {
    pub jumpToPos: ::std::os::raw::c_int,
    pub jumpToNeg: ::std::os::raw::c_int,
    pub stepsTotal: ::std::os::raw::c_int,
    pub finalPos: DmtxPixelLoc,
    pub finalNeg: DmtxPixelLoc,
    pub boundMin: DmtxPixelLoc,
    pub boundMax: DmtxPixelLoc,
    pub flowBegin: DmtxPointFlow,
    pub polarity: ::std::os::raw::c_int,
    pub stepR: ::std::os::raw::c_int,
    pub stepT: ::std::os::raw::c_int,
    pub locR: DmtxPixelLoc,
    pub locT: DmtxPixelLoc,
    pub leftKnown: ::std::os::raw::c_int,
    pub leftAngle: ::std::os::raw::c_int,
    pub leftLoc: DmtxPixelLoc,
    pub leftLine: DmtxBestLine,
    pub bottomKnown: ::std::os::raw::c_int,
    pub bottomAngle: ::std::os::raw::c_int,
    pub bottomLoc: DmtxPixelLoc,
    pub bottomLine: DmtxBestLine,
    pub topKnown: ::std::os::raw::c_int,
    pub topAngle: ::std::os::raw::c_int,
    pub topLoc: DmtxPixelLoc,
    pub rightKnown: ::std::os::raw::c_int,
    pub rightAngle: ::std::os::raw::c_int,
    pub rightLoc: DmtxPixelLoc,
    pub onColor: ::std::os::raw::c_int,
    pub offColor: ::std::os::raw::c_int,
    pub sizeIdx: ::std::os::raw::c_int,
    pub symbolRows: ::std::os::raw::c_int,
    pub symbolCols: ::std::os::raw::c_int,
    pub mappingRows: ::std::os::raw::c_int,
    pub mappingCols: ::std::os::raw::c_int,
    pub raw2fit: DmtxMatrix3,
    pub fit2raw: DmtxMatrix3,
}
#[doc = " @struct DmtxRegion"]
#[doc = " @brief DmtxRegion"]
pub type DmtxRegion = DmtxRegion_struct;
#[doc = " @struct DmtxMessage"]
#[doc = " @brief DmtxMessage"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DmtxMessage_struct {
    pub arraySize: size_t,
    pub codeSize: size_t,
    pub outputSize: size_t,
    pub outputIdx: ::std::os::raw::c_int,
    pub padCount: ::std::os::raw::c_int,
    pub fnc1: ::std::os::raw::c_int,
    pub array: *mut ::std::os::raw::c_uchar,
    pub code: *mut ::std::os::raw::c_uchar,
    pub output: *mut ::std::os::raw::c_uchar,
}
#[doc = " @struct DmtxMessage"]
#[doc = " @brief DmtxMessage"]
pub type DmtxMessage = DmtxMessage_struct;
#[doc = " @struct DmtxScanGrid"]
#[doc = " @brief DmtxScanGrid"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DmtxScanGrid_struct {
    pub minExtent: ::std::os::raw::c_int,
    pub maxExtent: ::std::os::raw::c_int,
    pub xOffset: ::std::os::raw::c_int,
    pub yOffset: ::std::os::raw::c_int,
    pub xMin: ::std::os::raw::c_int,
    pub xMax: ::std::os::raw::c_int,
    pub yMin: ::std::os::raw::c_int,
    pub yMax: ::std::os::raw::c_int,
    pub total: ::std::os::raw::c_int,
    pub extent: ::std::os::raw::c_int,
    pub jumpSize: ::std::os::raw::c_int,
    pub pixelTotal: ::std::os::raw::c_int,
    pub startPos: ::std::os::raw::c_int,
    pub pixelCount: ::std::os::raw::c_int,
    pub xCenter: ::std::os::raw::c_int,
    pub yCenter: ::std::os::raw::c_int,
}
#[doc = " @struct DmtxScanGrid"]
#[doc = " @brief DmtxScanGrid"]
pub type DmtxScanGrid = DmtxScanGrid_struct;
#[doc = " @struct DmtxTime"]
#[doc = " @brief DmtxTime"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DmtxTime_struct {
    pub sec: time_t,
    pub usec: ::std::os::raw::c_ulong,
}
#[doc = " @struct DmtxTime"]
#[doc = " @brief DmtxTime"]
pub type DmtxTime = DmtxTime_struct;
#[doc = " @struct DmtxDecode"]
#[doc = " @brief DmtxDecode"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DmtxDecode_struct {
    pub edgeMin: ::std::os::raw::c_int,
    pub edgeMax: ::std::os::raw::c_int,
    pub scanGap: ::std::os::raw::c_int,
    pub fnc1: ::std::os::raw::c_int,
    pub squareDevn: f64,
    pub sizeIdxExpected: ::std::os::raw::c_int,
    pub edgeThresh: ::std::os::raw::c_int,
    pub xMin: ::std::os::raw::c_int,
    pub xMax: ::std::os::raw::c_int,
    pub yMin: ::std::os::raw::c_int,
    pub yMax: ::std::os::raw::c_int,
    pub scale: ::std::os::raw::c_int,
    pub cache: *mut ::std::os::raw::c_uchar,
    pub image: *mut DmtxImage,
    pub grid: DmtxScanGrid,
}
#[doc = " @struct DmtxDecode"]
#[doc = " @brief DmtxDecode"]
pub type DmtxDecode = DmtxDecode_struct;
#[doc = " @struct DmtxEncode"]
#[doc = " @brief DmtxEncode"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DmtxEncode_struct {
    pub method: ::std::os::raw::c_int,
    pub scheme: ::std::os::raw::c_int,
    pub sizeIdxRequest: ::std::os::raw::c_int,
    pub marginSize: ::std::os::raw::c_int,
    pub moduleSize: ::std::os::raw::c_int,
    pub pixelPacking: ::std::os::raw::c_int,
    pub imageFlip: ::std::os::raw::c_int,
    pub rowPadBytes: ::std::os::raw::c_int,
    pub fnc1: ::std::os::raw::c_int,
    pub message: *mut DmtxMessage,
    pub image: *mut DmtxImage,
    pub region: DmtxRegion,
    pub xfrm: DmtxMatrix3,
    pub rxfrm: DmtxMatrix3,
}
#[doc = " @struct DmtxEncode"]
#[doc = " @brief DmtxEncode"]
pub type DmtxEncode = DmtxEncode_struct;
#[doc = " @struct DmtxChannel"]
#[doc = " @brief DmtxChannel"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DmtxChannel_struct {
    pub encScheme: ::std::os::raw::c_int,
    pub invalid: ::std::os::raw::c_int,
    pub inputPtr: *mut ::std::os::raw::c_uchar,
    pub inputStop: *mut ::std::os::raw::c_uchar,
    pub encodedLength: ::std::os::raw::c_int,
    pub currentLength: ::std::os::raw::c_int,
    pub firstCodeWord: ::std::os::raw::c_int,
    pub encodedWords: [::std::os::raw::c_uchar; 1558usize],
}
#[doc = " @struct DmtxChannel"]
#[doc = " @brief DmtxChannel"]
pub type DmtxChannel = DmtxChannel_struct;
#[doc = " @struct DmtxChannelGroup"]
#[doc = " @brief DmtxChannelGroup"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DmtxChannelGroup_struct {
    pub channel: [DmtxChannel; 6usize],
}
#[doc = " @struct DmtxChannelGroup"]
#[doc = " @brief DmtxChannelGroup"]
pub type DmtxChannelGroup = DmtxChannelGroup_struct;
#[doc = " @struct DmtxTriplet"]
#[doc = " @brief DmtxTriplet"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DmtxTriplet_struct {
    pub value: [::std::os::raw::c_uchar; 3usize],
}
#[doc = " @struct DmtxTriplet"]
#[doc = " @brief DmtxTriplet"]
pub type DmtxTriplet = DmtxTriplet_struct;
#[doc = " @struct DmtxQuadruplet"]
#[doc = " @brief DmtxQuadruplet"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DmtxQuadruplet_struct {
    pub value: [::std::os::raw::c_uchar; 4usize],
}
#[doc = " @struct DmtxQuadruplet"]
#[doc = " @brief DmtxQuadruplet"]
pub type DmtxQuadruplet = DmtxQuadruplet_struct;
extern "C" {
    pub fn dmtxTimeNow() -> DmtxTime;
}
extern "C" {
    pub fn dmtxTimeAdd(t: DmtxTime, msec: ::std::os::raw::c_long) -> DmtxTime;
}
extern "C" {
    pub fn dmtxTimeExceeded(timeout: DmtxTime) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dmtxEncodeCreate() -> *mut DmtxEncode;
}
extern "C" {
    pub fn dmtxEncodeDestroy(enc: *mut *mut DmtxEncode) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn dmtxEncodeSetProp(
        enc: *mut DmtxEncode,
        prop: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn dmtxEncodeGetProp(
        enc: *mut DmtxEncode,
        prop: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dmtxEncodeDataMatrix(
        enc: *mut DmtxEncode,
        n: ::std::os::raw::c_int,
        s: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn dmtxEncodeDataMosaic(
        enc: *mut DmtxEncode,
        n: ::std::os::raw::c_int,
        s: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn dmtxDecodeCreate(img: *mut DmtxImage, scale: ::std::os::raw::c_int) -> *mut DmtxDecode;
}
extern "C" {
    pub fn dmtxDecodeDestroy(dec: *mut *mut DmtxDecode) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn dmtxDecodeSetProp(
        dec: *mut DmtxDecode,
        prop: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn dmtxDecodeGetProp(
        dec: *mut DmtxDecode,
        prop: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dmtxDecodeGetCache(
        dec: *mut DmtxDecode,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn dmtxDecodeGetPixelValue(
        dec: *mut DmtxDecode,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn dmtxDecodeMatrixRegion(
        dec: *mut DmtxDecode,
        reg: *mut DmtxRegion,
        fix: ::std::os::raw::c_int,
    ) -> *mut DmtxMessage;
}
extern "C" {
    pub fn dmtxDecodePopulatedArray(
        sizeIdx: ::std::os::raw::c_int,
        msg: *mut DmtxMessage,
        fix: ::std::os::raw::c_int,
    ) -> *mut DmtxMessage;
}
extern "C" {
    pub fn dmtxDecodeMosaicRegion(
        dec: *mut DmtxDecode,
        reg: *mut DmtxRegion,
        fix: ::std::os::raw::c_int,
    ) -> *mut DmtxMessage;
}
extern "C" {
    pub fn dmtxDecodeCreateDiagnostic(
        dec: *mut DmtxDecode,
        totalBytes: *mut ::std::os::raw::c_int,
        headerBytes: *mut ::std::os::raw::c_int,
        style: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn dmtxRegionCreate(reg: *mut DmtxRegion) -> *mut DmtxRegion;
}
extern "C" {
    pub fn dmtxRegionDestroy(reg: *mut *mut DmtxRegion) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn dmtxRegionFindNext(dec: *mut DmtxDecode, timeout: *mut DmtxTime) -> *mut DmtxRegion;
}
extern "C" {
    pub fn dmtxRegionScanPixel(
        dec: *mut DmtxDecode,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> *mut DmtxRegion;
}
extern "C" {
    pub fn dmtxRegionUpdateCorners(
        dec: *mut DmtxDecode,
        reg: *mut DmtxRegion,
        p00: DmtxVector2,
        p10: DmtxVector2,
        p11: DmtxVector2,
        p01: DmtxVector2,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn dmtxRegionUpdateXfrms(
        dec: *mut DmtxDecode,
        reg: *mut DmtxRegion,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn dmtxMessageCreate(
        sizeIdx: ::std::os::raw::c_int,
        symbolFormat: ::std::os::raw::c_int,
    ) -> *mut DmtxMessage;
}
extern "C" {
    pub fn dmtxMessageDestroy(msg: *mut *mut DmtxMessage) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn dmtxImageCreate(
        pxl: *mut ::std::os::raw::c_uchar,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        pack: ::std::os::raw::c_int,
    ) -> *mut DmtxImage;
}
extern "C" {
    pub fn dmtxImageDestroy(img: *mut *mut DmtxImage) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn dmtxImageSetChannel(
        img: *mut DmtxImage,
        channelStart: ::std::os::raw::c_int,
        bitsPerChannel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn dmtxImageSetProp(
        img: *mut DmtxImage,
        prop: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn dmtxImageGetProp(
        img: *mut DmtxImage,
        prop: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dmtxImageGetByteOffset(
        img: *mut DmtxImage,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dmtxImageGetPixelValue(
        img: *mut DmtxImage,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn dmtxImageSetPixelValue(
        img: *mut DmtxImage,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn dmtxImageContainsInt(
        img: *mut DmtxImage,
        margin: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn dmtxImageContainsFloat(img: *mut DmtxImage, x: f64, y: f64) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn dmtxVector2AddTo(v1: *mut DmtxVector2, v2: *const DmtxVector2) -> *mut DmtxVector2;
}
extern "C" {
    pub fn dmtxVector2Add(
        vOut: *mut DmtxVector2,
        v1: *const DmtxVector2,
        v2: *const DmtxVector2,
    ) -> *mut DmtxVector2;
}
extern "C" {
    pub fn dmtxVector2SubFrom(v1: *mut DmtxVector2, v2: *const DmtxVector2) -> *mut DmtxVector2;
}
extern "C" {
    pub fn dmtxVector2Sub(
        vOut: *mut DmtxVector2,
        v1: *const DmtxVector2,
        v2: *const DmtxVector2,
    ) -> *mut DmtxVector2;
}
extern "C" {
    pub fn dmtxVector2ScaleBy(v: *mut DmtxVector2, s: f64) -> *mut DmtxVector2;
}
extern "C" {
    pub fn dmtxVector2Scale(
        vOut: *mut DmtxVector2,
        v: *const DmtxVector2,
        s: f64,
    ) -> *mut DmtxVector2;
}
extern "C" {
    pub fn dmtxVector2Cross(v1: *const DmtxVector2, v2: *const DmtxVector2) -> f64;
}
extern "C" {
    pub fn dmtxVector2Norm(v: *mut DmtxVector2) -> f64;
}
extern "C" {
    pub fn dmtxVector2Dot(v1: *const DmtxVector2, v2: *const DmtxVector2) -> f64;
}
extern "C" {
    pub fn dmtxVector2Mag(v: *const DmtxVector2) -> f64;
}
extern "C" {
    pub fn dmtxDistanceFromRay2(r: *const DmtxRay2, q: *const DmtxVector2) -> f64;
}
extern "C" {
    pub fn dmtxDistanceAlongRay2(r: *const DmtxRay2, q: *const DmtxVector2) -> f64;
}
extern "C" {
    pub fn dmtxRay2Intersect(
        point: *mut DmtxVector2,
        p0: *const DmtxRay2,
        p1: *const DmtxRay2,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn dmtxPointAlongRay2(
        point: *mut DmtxVector2,
        r: *const DmtxRay2,
        t: f64,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn dmtxMatrix3Copy(m0: *mut [f64; 3usize], m1: *mut [f64; 3usize]);
}
extern "C" {
    pub fn dmtxMatrix3Identity(m: *mut [f64; 3usize]);
}
extern "C" {
    pub fn dmtxMatrix3Translate(m: *mut [f64; 3usize], tx: f64, ty: f64);
}
extern "C" {
    pub fn dmtxMatrix3Rotate(m: *mut [f64; 3usize], angle: f64);
}
extern "C" {
    pub fn dmtxMatrix3Scale(m: *mut [f64; 3usize], sx: f64, sy: f64);
}
extern "C" {
    pub fn dmtxMatrix3Shear(m: *mut [f64; 3usize], shx: f64, shy: f64);
}
extern "C" {
    pub fn dmtxMatrix3LineSkewTop(m: *mut [f64; 3usize], b0: f64, b1: f64, sz: f64);
}
extern "C" {
    pub fn dmtxMatrix3LineSkewTopInv(m: *mut [f64; 3usize], b0: f64, b1: f64, sz: f64);
}
extern "C" {
    pub fn dmtxMatrix3LineSkewSide(m: *mut [f64; 3usize], b0: f64, b1: f64, sz: f64);
}
extern "C" {
    pub fn dmtxMatrix3LineSkewSideInv(m: *mut [f64; 3usize], b0: f64, b1: f64, sz: f64);
}
extern "C" {
    pub fn dmtxMatrix3Multiply(
        mOut: *mut [f64; 3usize],
        m0: *mut [f64; 3usize],
        m1: *mut [f64; 3usize],
    );
}
extern "C" {
    pub fn dmtxMatrix3MultiplyBy(m0: *mut [f64; 3usize], m1: *mut [f64; 3usize]);
}
extern "C" {
    pub fn dmtxMatrix3VMultiply(
        vOut: *mut DmtxVector2,
        vIn: *mut DmtxVector2,
        m: *mut [f64; 3usize],
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dmtxMatrix3VMultiplyBy(
        v: *mut DmtxVector2,
        m: *mut [f64; 3usize],
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dmtxMatrix3Print(m: *mut [f64; 3usize]);
}
extern "C" {
    pub fn dmtxSymbolModuleStatus(
        mapping: *mut DmtxMessage,
        sizeIdx: ::std::os::raw::c_int,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dmtxGetSymbolAttribute(
        attribute: ::std::os::raw::c_int,
        sizeIdx: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dmtxGetBlockDataSize(
        sizeIdx: ::std::os::raw::c_int,
        blockIdx: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dmtxByteListBuild(
        storage: *mut DmtxByte,
        capacity: ::std::os::raw::c_int,
    ) -> DmtxByteList;
}
extern "C" {
    pub fn dmtxByteListInit(
        list: *mut DmtxByteList,
        length: ::std::os::raw::c_int,
        value: DmtxByte,
        passFail: *mut ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn dmtxByteListClear(list: *mut DmtxByteList);
}
extern "C" {
    pub fn dmtxByteListHasCapacity(list: *mut DmtxByteList) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn dmtxByteListCopy(
        dst: *mut DmtxByteList,
        src: *const DmtxByteList,
        passFail: *mut ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn dmtxByteListPush(
        list: *mut DmtxByteList,
        value: DmtxByte,
        passFail: *mut ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn dmtxByteListPop(
        list: *mut DmtxByteList,
        passFail: *mut ::std::os::raw::c_uint,
    ) -> DmtxByte;
}
extern "C" {
    pub fn dmtxByteListPrint(list: *mut DmtxByteList, prefix: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn dmtxVersion() -> *mut ::std::os::raw::c_char;
}